@name "Ancient";
@author "Ranlmepow";
@comment "http://github.com";
@uuid F8D71E9B-7AB9-48B3-8E5D-E61ADEBDFDEF;

@function colr($hsl) {
     $h: map-get($hsl, h);
     $s: map-get($hsl, s);
     $l: map-get($hsl, l);
  
     @return hsl($h, (8+$s) / 8 * 100%, (8+$l) / 16 * 100%);
}

@function defc($hsl) {
    @return (h: nth($hsl, 1), s: nth($hsl, 2), l: nth($hsl, 3));
}

@function adjc($base, $hsl) {
    @return (
            h: map-get($base, h) + nth($hsl, 1),
            s: map-get($base, s) + nth($hsl, 2),
            l: map-get($base, l) + nth($hsl, 3));
}


$main: defc(27 -1.75 -0.35);

// Keyword
$keyw  : adjc($main,     0  2  3);      // class
$ctrl  : adjc($keyw,   -30  1  0);      // if for
$assign: adjc($keyw,     0 -4 -2);      // =
$symbol: adjc($keyw,     0  0 -2);      // + *
$comp  : adjc($keyw,    30 -1 -2);      // is == <=
$logic : adjc($keyw,    30 -1 -2);      // and not
$punc  : adjc($main,    30 -5  1);

// Text
$text  : adjc($main,     0 -4  5.25);      // foo
$light : adjc($main,     0 -3  6);      
$lang  : adjc($main,    15  2  2);      // null true
$this  : adjc($text,  -100  0 -5);      // this self
$item  : adjc($text,   -15  0 -3);      // foo[bar]
$asspun: adjc($punc,     0  5 -3);      // foo.bar
$call  : adjc($text,     0  9  9);      // foo[bar]
$other : adjc($text,    30  2 -2);

// Literal
$word  : adjc($main,  -180 -1  0);
$str   : adjc($word,     0 -1.5  0);      // "hello"
$strpun: adjc($str,    -15 -1  2);      // "..."
$esc   : adjc($str,     45  3  1);      // "new\n"
$place : adjc($str,     90  4  3);      // "adam is %s"
$num   : adjc($word,   -15  0  3);      // 123.0
$caps  : adjc($word,     0  3  3);      // ALL_CAPS
$regex : adjc($str,      0  0  0);      // r"[0-9]+"

// Builtin
$const : adjc($main,   120 -2  0);      // math.pi
$func  : adjc($const,   15  1  2);      // foo()
$type  : adjc($const,    0  1  0);      // int()

// Definition
$defkw : adjc($keyw,    0 -1 -1);
$deffun: adjc($main,  -25 -1  1);
$defcls: adjc($main,  -10  0  1);
$defvar: adjc($main,  -10  0  0);
$supcls: $type;
$param : adjc($text,    0  4 -0.5);

// Comment and Background
$comm  : adjc($main,   165 -5.50 -0.75);   // #brabra
$back  : adjc($main,     8 -5.00 -5.75);
$select: adjc($back,     0  0     2);
$illbk : adjc($back,     0  0    -1);
$commbk: adjc($back,    -8 -0.25 -0.15);
$emphbk: adjc($back,    -3 -0.45  0.25);


* {
    background: colr($back);
    foreground: colr($text);
    caret: #fff;
    lineHighlight: #444;
    selection: colr($select);
}


entity {
    @name "Entity";
    foreground: colr($text);
}

invalid {
    @name "Invalid";
    foreground: colr($text);
    
    &.illegal {
        @name "Illegal";
        background: colr($illbk); 
    }
    // TODO: choice other color
    &.deprecated {
        @name "Deprecated";
        background: colr($illbk);    
    }
}


// punctuation.terminator           ->      stmt;
//                                          ^
// punctuation.definition.section   ->      {code;}
//                                          ^     ^
// punctuation.definition.constant  ->      #const
//                                          ^
// punctuation.section.group
// punctuation.section.list
// punctuation.section.dictionary
// punctuation.definition.map
// punctuation.definition.set
// punctuation.definition.vector

punctuation \-\( entity \| storage \| keyword \) {
    @name "Punctuation";
    foreground: colr($punc);
}

punctuation {
    // punctuation.accessor             ->      a.b->c
    //                                           ^ ^^
    &.accessor {
        @name "Accessor";
        foreground: colr($asspun);
    }

    // !! not sure
    // punctuation.definition.variable  ->      $abc
    //                                          ^
    &.definition.variable {
        @name "Variable definition";
        foreground: colr($asspun);
    }

}
// punctuation.definition.constant      ->      #8f00cc
//                                              ^
constant.character.entity, punctuation.definition.entity, punctuation.definition.constant {
    @name "Constant definition";
    foreground: colr($asspun);
}


// string                               ->      "str"
//                                               ^^^      
string {
    @name "String";
    foreground: colr($str);

    // punctuation.definition.string    ->      "str"
    //                                          ^   ^
    punctuation.definition {
        @name "String punctuation";
        foreground: colr($strpun);
    }
    &.constant            { foreground: colr($str); }
    &.quoted              {
        @name "String quoted";
        foreground: colr($str);
        background: colr($commbk);
    }
}

comment.block.documentation, string.docstring  {
    @name "Docstring";
    foreground: colr($str);
}

string.quoted.double.block, string.quoted.single.block {
    @name "Block string";
    foreground: colr($str);
}


// string.regex                     ->      /match/g
//                                           ^^^^^      
string.regexp, source.regexp {
    @name "Regexp";
    foreground: colr($regex);
}



constant {
    // constant.language                ->      true, false, null
    &.language {
        @name "Built-in constant";
        foreground: colr($lang);
    }
    // constant.numeric                 ->      100.0
    &.numeric {
        @name "Numeric";
        foreground: colr($num);
    }
    &.other, &.other.allcaps, &.other.enum, &.character {
        @name "User-defined constant";
        foreground: colr($caps);
    }
    // constant.placeholder             ->      'my name is {1}'
    //                                                      ^^^
    &.other.placeholder {
        @name "Placeholder";
        foreground: colr($place);
    }
    // constant.escape                  ->      'another lines\n'
    //                                                        ^^
    &.character.escape {
        @name "Escape";
        foreground: colr($esc);
    }
}

comment {
    @name "Comment";
    foreground: colr($comm);
    background: colr($commbk);
}
punctuation.definition.comment, punctuation.definition.line-comment {
    @name "Comment punctuation";
    foreground: colr($comm);
    background: colr($commbk);
}


support {
    &.keyword {
        @name "Library keyword";
        foreground: colr($keyw);
    }
    // support.constant                 ->      PI
    &.constant \- &.constant.magic {
        @name "Library constant";
        foreground: colr($const);
    }
    &.variable \- &.variable.magic {
        @name "Library variable";
        foreground: colr($const);
    }
    // support.function                 ->      typeof()
    &.function \- &.function.magic {
        @name "Library function";
        foreground: colr($func);
    }
    &.function.builtin {
        @name "Library builtin";
        foreground: colr($func);
    }
    // support.type                     ->      int()
    &.type, &.class {
        @name "Library type";
        foreground: colr($type);
    }
    &.type.exception {
        @name "Exception type";
        foreground: colr($type);
    }
    &.module {
        @name "Library module";
        foreground: colr($this);
    }
}

// TODO: ? keyword.control.catch-exception
// TODO: ? keyword.control.trycatch
// TODO: ? keyword.control.flow.except
keyword {
    
    @name "Keyword";
    foreground: colr($keyw);
    
    // keyword.control                  ->      if ...
    &.operator.keyword {
        @name "Keyword control";
        foreground: colr($keyw);
    }
    // keyword.operator.assignment      ->      a = b
    //                                            ^
    &.operator.assignment {
        @name "Assignment";
        foreground: colr($assign);
    }
    // keyword.operator.assignment.augmented ->      a += b
    //                                                 ^^
    &.operator.assignment.augmented {
        @name "Augmented assignment";
        foreground: colr($assign);
    }
    // keyword.operator.comparison      ->      a == b
    //                                            ^^
    &.operator.comparison {
        @name "Comparison";
        foreground: colr($comp);
    }
    // keyword.operator.arithmetic      ->      a + b
    //                                            ^
    &.operator.arithmetic, &.operator.bitwise {
        @name "Arithmetic";
        foreground: colr($symbol);
    }
    // keyword.operator.arithmetic      ->      a and b
    //                                            ^^^
    &.operator.logical {
        @name "Logical";
        foreground: colr($logic);
    }
    // example??
    &.other {
        @name "Other keyword";
        foreground: colr(adjc($keyw, -10 -2 -1.5));
    }

    // TODO: keyword.operator.module
    // TODO: keyword.control.import
    // TODO: keyword.other.package
    // TODO: keyword.other.import
}

meta.expression.generator keyword.control.flow {
    @name "Keywords in comprehension ";
    foreground: #FFFF00;
}
meta.expression.generator {
    @name "Comprehension";
    background: colr($emphbk);
}



storage.type {
    // storage.type.class               ->      class MyClass {}
    //                                          ^^^^^
    &.class {
        @name "Class keyword";
        foreground: colr($defkw);
        fontStyle: bold;
    }
    // storage.type.class               ->      function Myfunc() {}
    //                                          ^^^^^^^^
    &.function {
        @name "Function keyword";
        foreground: colr($defkw);
        fontStyle: bold;
    }

    // storage.type.generic storage.type -> T<U, V>
    //                                        ^  ^
    &.generic & {
        @name "Generic type";
        foreground: colr(adjc($type, -45 -2  0));
    }
    // storage.type.class               ->      @Deprecated
    //                                          ^^^^^^^^^^^
    &.annotation {
        @name "Annotation";
        foreground: colr($defkw);
        fontStyle: bold;
    }
}

// storage.type                         ->      static int a;
//                                                     ^^^
storage, storage.type {
    @name "Storage type";
    foreground: colr($type);
}
meta.method.return-type storage.type {
    @name "Return type";
}
// storage.modifier                     ->      static int a;
//                                              ^^^^^^
storage.modifier {
    @name "Storage modifier";
    foreground: colr($keyw);
}



entity {
    // entity.name.at-rule (CSS)        ->      @name "...";
    //                                          ^^^^^
    &.name.at-rule {
        @name "At-rule";
        foreground: colr($type);
    }
    // entity.name.package (Scala)
    &.name.package {
        @name "Scala Package";
        foreground: colr($type);
    }

    // entity.other.inherited-class     ->      public class HashMap<K,V> extends AbstractMap<K,V>
    //                                                                            ^^^^^^^^^^^^^^^^
    &.other.inherited-class, &.other {
        @name "Inherited class";
        foreground: colr($type);
    }
    // entity.other.inherited-class     ->      public class HashMap<K,V> extends AbstractMap<K,V>
    //                                                       ^^^^^^^^^^^^
    &.name.class, &.name.type.class, variable.other.class {
        @name "Class definition";
        foreground: colr($defcls);
        fontStyle: bold;
    }
    &.name.function {
        @name "Function definition";
        foreground: colr($deffun);
        fontStyle: bold;
    }

    // entity.name.tag                  ->      <body>
    //                                           ^^^^
    &.name.tag {
        @name "Tag Name";
        foreground: colr(adjc($deffun, 0 -0.5 -0.5));
    }
    // entity.name.tag.doctype          ->      <!DOCTYPE html>
    //                                            ^^^^^^^
    &.name.tag.doctype {
        @name "Doctype";
        foreground: colr($defcls);
    }
    // entity.name.other.attribute-name ->      <body attr="value">
    //                                                ^^^^
    &.other.attribute-name {
        @name "Attribute Name";
        foreground: colr(adjc($keyw, 0 -1 -1));
    }

    // TODO: more emphasize color
    &.other.attribute-name.id {
        @name "Attribute IDs";
        foreground: colr(adjc($keyw, 0  2  0));
    }
}



// TODO: variable, punctuation.definition.variable
// TODO: variable.other, meta.variable.other.valid
variable {
    foreground: colr($text);
    &.other { foreground: colr($other); }

    // variable.parameter               ->      function foo(a, b)
    //                                                       ^  ^
    &.parameter {
        @name "Parameter";
        foreground: colr($param);
        fontStyle: italic;
    }
    // variable.language                ->      this.foo.bar()
    //                                          ^^^^
    &.language, &.parameter.function.language {
        @name "Language literal";
        foreground: colr($this);
    }
    // variable.function                ->      this.foo.bar()
    //                                                   ^^^
    &.function {
        @name "Function call";
        foreground: colr($call);
    }
}

// variable.function                    ->      this.foo[bar]
//                                                       ^^^
meta.item-access.arguments {
    @name "Item access";
    foreground: colr($item);
    background: colr($emphbk);
}


meta.preprocessor {
    @name "C/C++ Preprocessor Line";
    foreground: colr($this);
}

meta.preprocessor keyword {
    @name "C/C++ Preprocessor Directive";
    foreground: colr($this);
}

// Multilevel Json
@function multilevel($repeat, $final, $count) {
    @if $count == 1 {
        @return '#{$final}';
    } @else {
        @return '#{$repeat} ' + multilevel($repeat, $final, $count - 1);
    }
}

// meta.structure.dictionary meta.structure.dictionary.key, constant.other.object.key string, meta.object-literal.key {
//     @name "Dict key";
//     fontStyle: bold;
//     foreground: #A9FF98;
// }
// meta.structure.dictionary.value {
//     @name "Dict Value";
//     foreground: #7DC5F9;
// }

@for $i from 1 through 12 { 
    source.json #{ multilevel('meta meta', 'meta.structure.dictionary string.quoted', $i) } {
        @if $i == 1 {
            foreground: colr($deffun);
        } @else {
            foreground: colr(adjc($keyw, 0 -1 -1));
        }
    }
    
    // source.yaml #{ multilevel('entity.name.tag', 'entity.name.tag', $i) } {
    //     @if $i == 1 {
    //         foreground: colr($deffun);
    //     } @else {
    //         foreground: colr(adjc($keyw, 0 -1 -1));
    //     }
    // }

    source.json #{ multilevel('meta meta', 'meta.structure.dictionary meta.structure.dictionary.value string.quoted', $i) } {
        foreground: colr($str);
    }

    // source.yaml #{ multilevel('entity.name.tag', 'entity.name.tag', $i) } {
    //     foreground: colr(adjc($str, 0 -1 -1));
    // }
}


// Markup
// ------

markup.italic, punctuation.definition.italic {
    @name "Markup italic";
    fontStyle: italic;
}
markup.bold, punctuation.definition.bold {
    @name "Markup bold";
    fontStyle: bold;
}
markup.raw.inline, markup.raw.block, punctuation.definition.raw {
    @name "Markup raw";
    foreground: colr($str);
    background: colr($commbk);
}


// punctuation.definition.heading
// entity.name.section
// markup.heading.\1
// markup.heading
markup.heading, entity.name.section {
    @name "Markup heading";
    foreground: colr($call);
}

markup.list.unnumbered, markup.list.numbered {

}

punctuation.definition.list_item {
    @name "Markup list";
    foreground: colr($call);
}

markup.quote {
    @name "Markup quote";
    background: colr($emphbk);
}
punctuation.definition.blockquote {
    @name "Markup quote punctuation";
    foreground: colr($comm);
    background: colr($comm);
}


// constant.other.reference.link
string.other.link, markup.underline.link {
    @name "Markup link";
    foreground: colr($str);
}

meta.separator.markdown {
    @name "Markup separator";
    foreground: colr($comm);
}


// find-in-files syntax
entity.name.filename.find-in-files {
    @name "Find In Files: filename";
    foreground: colr($type);
}
// same as number
// constant.numeric.line-number.find-in-files {
//     @name "Find In Files: Line Number";
//     foreground: colr($comm);
// }
constant.numeric.line-number.match.find-in-files {
    @name "Find In Files: Line Number - Match";
    foreground: colr($lang);
}


// diff syntax
markup.inserted {
    @name "Diff inserted";
    foreground: colr($str);
}
markup.deleted {
    @name "Diff deleted";
    foreground: colr($deffun);
}
markup.changed {
    @name "Diff changed";
    foreground: colr($keyw);
}

meta.diff.header.from-file {
    @name "Diff from file";
    foreground: colr($type);
    punctuation.definition {
        @name "Diff from file punctuation";
        foreground: colr($punc);
    }
}
meta.diff.header.to-file {
    @name "Diff to file";
    foreground: colr($func);
    punctuation.definition {
        @name "Diff to file punctuation";
        foreground: colr($punc);
    }
}
meta.diff.range {
    @name "Diff range";
    foreground: colr($item);
    punctuation.definition {
        @name "Diff range punctuation";
        foreground: colr($punc);
    }
}


// Javascript Bable
// ----------------

// meta.embedded.expression {
//     @name "Babel - Embedded Expression";
//     background: #635E0470;
//     fontStyle: ;
// }

// punctuation.section.embedded {
//     @name "Babel - Embedded Expression Punctuation";
//     fontStyle: bold italic;
//     foreground: #FFF707;
//}

